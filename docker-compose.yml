services:
  frontend:
    build: ./frontend
    ports:
      - "3001:3001"
    environment:
      - API_URL=http://api:3000
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001"]
      interval: 30s
      timeout: 5s
      retries: 3
      
  prometheus:
    image: prom/prometheus
    ports: ["9090:9090"]
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert.rules:/etc/prometheus/alert.rules
    command: --config.file=/etc/prometheus/prometheus.yml --web.enable-lifecycle
    depends_on: [api]

  grafana:
    image: grafana/grafana
    ports: ["3002:3000"]
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_DATABASE_TYPE=sqlite3
      - GF_DATABASE_PATH=/var/lib/grafana/grafana.db
      - GF_LOG_LEVEL=warn
      - GF_LOG_MODE=console
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on: [prometheus]
  
  api:
    build: ./backend
    ports:
      - "3000:3000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PG_HOST=postgres
      - PG_USER=postgres
      - PG_PASSWORD=password
      - PG_DATABASE=task_queue
      - PG_PORT=5432
      - OTEL_SERVICE_NAME=task-api
      - LOG_LEVEL=info
      - NODE_ENV=production
      # Only log errors from prometheus and health checks
      - DEBUG_LEVEL=error
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  worker:
    build: ./worker
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PG_HOST=postgres
      - PG_USER=postgres
      - PG_PASSWORD=password
      - PG_DATABASE=task_queue
      - PG_PORT=5432
      - OTEL_SERVICE_NAME=task-worker
      - LOG_LEVEL=info
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  jaeger:
    image: jaegertracing/all-in-one:1.47
    ports:
      - "16686:16686"
      - "6831:6831/udp"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger-data:/badger

  redis:
    image: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    # Remove port mapping to avoid conflicts
    # ports:
    #   - "6379:6379"

  postgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: task_queue
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d task_queue"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
  grafana-data:
  jaeger-data:
